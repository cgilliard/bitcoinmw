use crypto::constants::*;
use crypto::ffi::{aes_context_size, aes_ctr_xcrypt_buffer, aes_init, aes_set_iv};
use crypto::types::AesContext;
use prelude::*;

pub struct Aes256 {
	data: [u8; AES_256_CONTEXT_SIZE],
}

impl AsRaw<AesContext> for Aes256 {
	fn as_ptr(&self) -> *const AesContext {
		&self.data as *const u8 as *const AesContext
	}
	fn as_mut_ptr(&mut self) -> *mut AesContext {
		&mut self.data as *const u8 as *mut AesContext
	}
}

impl Aes256 {
	pub fn new(key: [u8; 32], iv: [u8; 16]) -> Self {
		let data = [0u8; AES_256_CONTEXT_SIZE];
		let size = unsafe { aes_context_size() };
		if size != AES_256_CONTEXT_SIZE {
			exit!(
				"aes_context_size() ({}) != AES_256_CONTEXT_SIZE ({})! Halting!",
				size,
				AES_256_CONTEXT_SIZE
			);
		}
		unsafe {
			aes_init(
				&data as *const u8 as *const AesContext,
				key.as_ptr(),
				iv.as_ptr(),
			);
		}
		Self { data }
	}

	pub fn set_iv(&self, iv: [u8; 16]) {
		unsafe {
			aes_set_iv(&self.data as *const u8 as *const AesContext, iv.as_ptr());
		}
	}

	pub fn crypt(&self, buf: &mut [u8]) {
		unsafe {
			aes_ctr_xcrypt_buffer(
				&self.data as *const u8 as *const AesContext,
				buf.as_mut_ptr(),
				buf.len(),
			);
		}
	}
}

#[cfg(test)]
mod test {
	use super::*;

	#[test]
	fn test_aes256_1() -> Result<(), Error> {
		let aes1 = Aes256::new([0u8; 32], [0u8; 16]);
		let mut buf32 = [0u8; 32];
		aes1.crypt(&mut buf32);
		assert_ne!(buf32, [0u8; 32]);

		let aes1 = Aes256::new([0u8; 32], [0u8; 16]);
		let mut buf32_2 = [0u8; 32];
		aes1.crypt(&mut buf32_2);
		assert_ne!(buf32_2, [0u8; 32]);
		assert_eq!(buf32, buf32_2);
		Ok(())
	}

	#[test]
	fn test_aes1() -> Result<(), Error> {
		let key: [u8; 32] = [
			0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d,
			0x77, 0x81, 0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3,
			0x09, 0x14, 0xdf, 0xf4,
		];
		let mut input: [u8; 64] = [
			0x60, 0x1e, 0xc3, 0x13, 0x77, 0x57, 0x89, 0xa5, 0xb7, 0xa7, 0xf5, 0x04, 0xbb, 0xf3,
			0xd2, 0x28, 0xf4, 0x43, 0xe3, 0xca, 0x4d, 0x62, 0xb5, 0x9a, 0xca, 0x84, 0xe9, 0x90,
			0xca, 0xca, 0xf5, 0xc5, 0x2b, 0x09, 0x30, 0xda, 0xa2, 0x3d, 0xe9, 0x4c, 0xe8, 0x70,
			0x17, 0xba, 0x2d, 0x84, 0x98, 0x8d, 0xdf, 0xc9, 0xc5, 0x8d, 0xb6, 0x7a, 0xad, 0xa6,
			0x13, 0xc2, 0xdd, 0x08, 0x45, 0x79, 0x41, 0xa6,
		];
		let iv: [u8; 16] = [
			0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd,
			0xfe, 0xff,
		];
		let expected_output: [u8; 64] = [
			0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93,
			0x17, 0x2a, 0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac,
			0x45, 0xaf, 0x8e, 0x51, 0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb,
			0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef, 0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
			0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
		];

		let aes = Aes256::new(key, iv);
		aes.crypt(&mut input);

		assert_eq!(input, expected_output);

		Ok(())
	}

	#[test]
	fn test_aes_rfc3686() -> Result<(), Error> {
		// Key
		let key: [u8; 32] = [
			0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d,
			0x77, 0x81, 0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3,
			0x09, 0x14, 0xdf, 0xf4,
		];

		// IV/Nonce
		let iv: [u8; 16] = [
			0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd,
			0xfe, 0xff,
		];

		let aes = Aes256::new(key, iv);

		// Input Plaintext
		let mut input: [u8; 64] = [
			0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93,
			0x17, 0x2a, 0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac,
			0x45, 0xaf, 0x8e, 0x51, 0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb,
			0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef, 0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
			0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
		];

		// Expected Ciphertext
		let expected_output: [u8; 64] = [
			0x60, 0x1e, 0xc3, 0x13, 0x77, 0x57, 0x89, 0xa5, 0xb7, 0xa7, 0xf5, 0x04, 0xbb, 0xf3,
			0xd2, 0x28, 0xf4, 0x43, 0xe3, 0xca, 0x4d, 0x62, 0xb5, 0x9a, 0xca, 0x84, 0xe9, 0x90,
			0xca, 0xca, 0xf5, 0xc5, 0x2b, 0x09, 0x30, 0xda, 0xa2, 0x3d, 0xe9, 0x4c, 0xe8, 0x70,
			0x17, 0xba, 0x2d, 0x84, 0x98, 0x8d, 0xdf, 0xc9, 0xc5, 0x8d, 0xb6, 0x7a, 0xad, 0xa6,
			0x13, 0xc2, 0xdd, 0x08, 0x45, 0x79, 0x41, 0xa6,
		];

		aes.crypt(&mut input);
		assert_eq!(input, expected_output);

		aes.crypt(&mut input);
		assert_ne!(input, expected_output);

		aes.set_iv(iv);

		// Input Plaintext
		let mut input: [u8; 64] = [
			0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93,
			0x17, 0x2a, 0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac,
			0x45, 0xaf, 0x8e, 0x51, 0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb,
			0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef, 0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17,
			0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10,
		];

		aes.crypt(&mut input);
		assert_eq!(input, expected_output);
		Ok(())
	}
}
